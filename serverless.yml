service: service-name

frameworkVersion: "2"
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${env:NODE_ENV} # Default stage to be used. Default is "dev"
  region: ap-south-1 # Default region to be used. Default is "us-east-1"
  apiName: ${self:service}
  versionFunctions: false
  memorySize: 256
  architecture: arm64
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObjectAcl
            - s3:GetObject
            - s3:GetObjectAcl
            - s3:DeleteObject
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - "*"

resources:
  Resources:
    S3Bucket: ${file(resources/s3Bucket.yaml):S3Bucket}
    S3BucketPolicy: ${file(resources/s3Bucket.yaml):S3BucketPolicy}

functions:
  api:
    handler: src/functions/api.handler
    timeout: 10
    reservedConcurrency: null
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
  consumer:
    handler: src/functions/service-name-consumer.handler
    timeout: 10
    reservedConcurrency: null
    events:
      - sns:
          topicName: ${self:custom.instituteSubscriberTopic}
      - sns:
          topicName: ${self:custom.userSubscriberTopic}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-offline-sns
  - serverless-dotenv-plugin

package:
  include:
    - openapi.yaml
    - resources/firebase-admin.json

custom:
  remover:
    buckets:
      - service-name-assets
  S3Bucket:
    name: service-name-assets
  instituteSubscriberTopic: "${self:provider.stage}-Institute"
  userSubscriberTopic: "${self:provider.stage}-User"
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
