/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    get: operations["usersGet"];
    post: operations["createUser"];
  };
}

export interface components {
  schemas: {
    PaginationHelper: {
      nextPage: number | null;
      total?: number;
    };
    UserCreate: {
      /**
       * @description Name of the user
       * @example PP
       */
      name: string;
      /** @description Age of user */
      age: number;
    };
    Users: {
      users: components["schemas"]["User"][];
    };
    User: {
      type?: string;
    };
    ErrorSchema: {
      message: string;
      error: string;
      statusCode: number;
      data: { [key: string]: unknown } | null;
    };
    /**
     * Format: url
     * @description Url of a resource
     */
    Url: string;
    /**
     * Format: date-time
     * @description An ISO formatted timestamp
     */
    Timestamp: Date | string;
  };
  responses: {
    /** Returns Users */
    UsersResponse: {
      content: {
        "application/json": components["schemas"]["PaginationHelper"] &
          components["schemas"]["Users"];
      };
    };
    /** Returns User */
    UserResponse: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    /** Error response */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorSchema"];
      };
    };
  };
  parameters: {
    QParam: string | null;
    CountParam: number;
    PageParam: number;
    IncludeTotal: "false" | "true";
    IdParam: string;
    /** @description returns the single resource */
    OptionalIdParam: string;
  };
  requestBodies: {
    UserUpsertBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
  };
}

export interface operations {
  usersGet: {
    parameters: {
      query: {
        includeTotal?: components["parameters"]["IncludeTotal"];
        q?: components["parameters"]["QParam"];
        /** returns the single resource */
        id?: components["parameters"]["OptionalIdParam"];
        count?: components["parameters"]["CountParam"];
        page?: components["parameters"]["PageParam"];
      };
    };
    responses: {
      200: components["responses"]["UsersResponse"];
    };
  };
  createUser: {
    responses: {
      200: components["responses"]["UserResponse"];
    };
    requestBody: components["requestBodies"]["UserUpsertBody"];
  };
}

export interface external {}
